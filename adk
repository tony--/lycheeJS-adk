#!/bin/bash
#
# lycheeJS ADK
# (App Development Kit)
#
# Copyright (c) 2012 by Christoph Martens.
# Dual Licensed via GPL or lycheeJS-ADK EULA
#
# Please see the LICENSE included with this distribution
# for further details.
#



DEBUG_MODE=0;

ADK_PATH=$(cd "$(dirname "$0")"; pwd);
V8_PATH=$ADK_PATH/external/v8;


# This is only used in case of issue reporting
# Please do not remove this, it allows easier debugging of your problem.
echo -e "" > $ADK_PATH/log;
echo -e "ADK call: $0 $1 $2 $3 $4" >> $ADK_PATH/log;
echo -e "Environment: "$(uname -a) >> $ADK_PATH/log;
echo -e "g++ Version: "$(g++ --version | sed -n 1p) >> $ADK_PATH/log;
echo -e "\n" >> $ADK_PATH/log;



usage() {

cat <<EOF

lycheeJS ADK (App Development Kit) 0.1

Recommended development environment: Ubuntu 12.04 64Bit

The ADK allows native platform builds of your JavaScript game using the
lycheeJS game engine stack. Please follow the guidelines in lycheeJS
to allow proper builds and avoid futile errors.


Usage: $0 <task> [ <options> ]


Tasks:
    help              Shows this help message
    setup             (Re)Installs all required dependencies and libraries
    build             Builds an application
    clean             Cleans all previous builds


Build Usage:

$0 build <platform> <path>
$0 build <platform> <path> --debug


<platform> is the targeted platform.
    all, linux, windows, macosx, android

<path> is the path to your game folder.
    This folder should include an init.js which initializes the code and should
    be included in your HTML5 / web build.

	Take a look at the game examples in lycheeJS itself for best practices.


Examples:

$0 setup
$0 build linux ./external/lycheeJS/game/boilerplate
$0 clean
$0 build android ./external/lycheeJS/game/boilerplate


EOF

}

clean() {

	echo -e "\n\n~ ~ ~ clean() ~ ~ ~\n" >> $ADK_PATH/log;

	cd $ADK_PATH;

	if [ -d "./out" ]
	then
		rm -rf "./out" 2>&1;
	fi;

	if [ "$?" -eq "0" ]
	then
		echo 0;
	else
		echo 1;
	fi;

}

# $(install_dependencies apt)
install_dependencies() {

	echo -e "\n\n~ ~ ~ install_dependencies() ~ ~ ~\n" >> $ADK_PATH/log;

	echo -e "\nPackage Manager: $1" >> $ADK_PATH/log;

	cd $ADK_PATH;

	sudo $1 -y install wget build-essential unzip git g++ freeglut3-dev libgl1-mesa-dev libglu1-mesa-dev libev-dev libpng-dev >> $ADK_PATH/log;

	if [ $? -eq 0 ]
	then
		echo 0;
	else
		echo $?;
	fi;

}

# $(install_lychee zip) for library usage
# $(install_lychee git) for active development
install_lycheejs() {

	echo -e "\n\n~ ~ ~ install_lychee() ~ ~ ~\n" >> $ADK_PATH/log;

	cd $ADK_PATH;

	if [ -d "external/lycheeJS" ]
	then
		rm -rf "external/lycheeJS";
	fi;

	if [ -d ".temp" ]
	then
		rm -rf ".temp";
	fi;
 


	# prepare folder structure
	if [ ! -d "external/lycheeJS" ]
	then
		mkdir "external/lycheeJS"
	fi;

	if [ ! -d ".temp" ]
	then
		mkdir ".temp";
	fi;


	if [ "$1" == "zip" ]
	then

		wget -O .temp/lycheejs.zip https://github.com/martensms/lycheeJS/zipball/master >> $ADK_PATH/log 2>&1;
		if [ ! "$?" -eq "0" ]; then echo "$?: Could not download zip file (wget)."; return; fi;

		unzip .temp/lycheejs.zip -d $ADK_PATH/.temp >> $ADK_PATH/log;
		if [ ! "$?" -eq "0" ]; then echo "$?: Could not extract zip file (unzip)."; return; fi;

		mv $ADK_PATH/.temp/martensms-lycheeJS-*/* $ADK_PATH/external/lycheeJS >> $ADK_PATH/log;
		if [ ! "$?" -eq "0" ]; then echo "$?: Could not move extracted files to external/lycheeJS."; return; fi;

		echo 0;

	elif [ "$1" == "git" ]
	then

		git clone https://github.com/martensms/lycheeJS.git external/lycheeJS >> $ADK_PATH/log 2>&1;
		if [ ! "$?" -eq "0" ]; then echo "$?: Could not clone repository (git)."; return; fi;

		echo 0;

	else
		echo 1;
	fi;

}

# $(build_v8 x64.release)
build_v8() {

	echo -e "\n\n~ ~ ~ build_v8() ~ ~ ~\n" >> $ADK_PATH/log;

	cd $V8_PATH && make $1 >> $ADK_PATH/log;

	if [ $? -eq 0 ]
	then
		echo 0;
	else
		echo $?;
	fi;

	cd $ADK_PATH;

}

# $(build_v8gl x64.release V8ADK)
build_v8gl() {

	echo -e "\n\n~ ~ ~ build_v8gl() ~ ~ ~\n" >> $ADK_PATH/log;

	v8_libs=$V8_PATH/out/$1/obj.target/tools/gyp/libv8_base.a;
	v8_libs=$v8_libs" "$V8_PATH/out/$1/obj.target/tools/gyp/libv8_snapshot.a;

	build_libs=$v8_libs" -lpthread -lglut -lGLU -lGL -lpng";
	build_srcs="main.cpp v8gl/v8gl.cpp v8gl/path.cpp api/console.cpp api/script.cpp api/text.cpp api/texture.cpp binding/gl/glbind.cpp binding/glu.cpp binding/glut.cpp";

	if [ "$2" == "V8ADK" ]
	then
		build_flags="-DV8ADK";
		build_out="$ADK_PATH/.temp/v8adk";
	else
		build_flags="";
		build_out="$ADK_PATH/.temp/v8gl";
	fi;

	if [ $DEBUG_MODE -eq 1 ]
	then
		build_command="g++ $build_flags -g -Wall -I$V8_PATH/include $build_srcs -o $build_out $build_libs";
	else
		build_command="g++ $build_flags -Wall -I$V8_PATH/include $build_srcs -o $build_out $build_libs";
	fi;


	cd $ADK_PATH;

	if [ ! -d ".temp" ]
	then
		mkdir ".temp";
	fi;


	# create @built-in lycheeJS JavaScript headers
	cd $ADK_PATH/external/lycheeJS;

	xxd -i "lychee/core.js" "$ADK_PATH/v8gl/jsapi/lychee_core_js.h";
	xxd -i "lychee/Builder.js" "$ADK_PATH/v8gl/jsapi/lychee_Builder_js.h";
	xxd -i "lychee/platform/v8gl/Preloader.js" "$ADK_PATH/v8gl/jsapi/lychee_Preloader_js.h";


	# create @built-in JavaScript headers
	cd $ADK_PATH/v8gl;

	xxd -i "jsapi/interval.js" "$ADK_PATH/v8gl/jsapi/interval.h";
	xxd -i "jsapi/timeout.js" "$ADK_PATH/v8gl/jsapi/timeout.h";



	cd $ADK_PATH/v8gl;

	echo -e "$build_command\n" >> $ADK_PATH/log;
	$build_command >> $ADK_PATH/log 2>&1;

	if [ $? -eq 0 ]
	then
		echo 0;
	else
		echo $?;
	fi;

}

# $(package_game /abs/game/folder /adk/out/linux);
build_game() {

	echo -e "\n\n~ ~ ~ build_game() ~ ~ ~\n" >> $ADK_PATH/log;

	game_source=$1;
	game_target=$2;


	cd $ADK_PATH;

	# Export the game environment to determine required libraries
	$ADK_PATH/.temp/v8adk "export-bash" $game_source/init.js > $ADK_PATH/.temp/game_env.adk;
	$ADK_PATH/.temp/v8adk "rewrite" $game_source/init.js > $ADK_PATH/.temp/game_init.js;

	. ./.temp/game_env.adk;


	declare -A game_bases;
	declare -A game_tags;

	echo -e "game source: $game_source" >> $ADK_PATH/log;
	echo -e "game target: $game_target" >> $ADK_PATH/log;
	echo -e "game environment:" >> $ADK_PATH/log;

	for i in "${!env_bases[@]}"
	do
		game_bases[$i]=$(cd $game_source; cd "${env_bases[$i]}"; pwd;);
		echo -e "\tbase $i: ${game_bases[$i]}" >> $ADK_PATH/log;
	done;

	for i in "${!env_tags[@]}"
	do
		game_tags[$i]="${env_tags[$i]}";
		echo -e "\ttag $i: ${game_tags[$i]}" >> $ADK_PATH/log;
	done;


	cd $ADK_PATH;

	mkdir -p $game_target;

	for id in "${!game_bases[@]}"
	do
		cp -R "${game_bases[$id]}" $game_target/$id;
	done;

	if [ -d $game_source/asset ]
	then
		cp -R $game_source/asset $game_target/asset;
	fi;

	# cp $game_source/init.js $game_target/init.js;

	cp ./.temp/game_init.js $game_target/init.js;
	cp ./.temp/v8gl $game_target/start;
	chmod +x $game_target/start;


	echo -e "#/!bin/bash\ncd \"\$(dirname \"\$0\")\"; ./start" > $game_target/start.sh;
	chmod +x $game_target/start.sh;

	cd $ADK_PATH;
#	rm -rf ".temp";

	echo 0;

}


# $(finish exitcode message)
finish() {

	if [ $1 -eq 1 ]
	then

		echo -e "\n\nERROR: It seems as the lycheeJS-ADK had a problem.\n\n";
		echo -e "If this error occurs though following the guidelines,";
		echo -e "please report an issue at https://github.com/martensms/lycheeJS-adk/issues";
		echo -e "and attach the ./log file to it. Thanks!";

	fi;


	exit $1;

}


case "$1" in
	help)
		usage;
		exit;
		;;
	setup)

		echo -e "\nSetting Up...";

		if [ -f /usr/bin/aptitude ]
		then
			apt="/usr/bin/aptitude";
		elif [ -f /usr/bin/apt-get ]
		then
			apt="/usr/bin/apt-get";
		else
			apt="";
		fi;


		if [ "$apt" != "" ]
		then

			echo -e "\n\tInstalling dependencies...";

			success=$(install_dependencies $apt);

			if [ "$success" -eq "0" ]
			then
				echo -e "\tdone.";
			else
				echo -e "\tfailed (exit code: $success).";
				finish 1 "$success";
			fi;



			echo -e "\n\tInstalling lycheeJS...";

			while [ "$answer" != "yes" -a "$answer" != "no" ]
			do
				echo -n -e "\tWARNING: This will undo all modifications in external/lycheeJS. Continue [ yes/no ]? ";
				read answer;
			done;
 
			if [ "$answer" == "yes" ]
			then

				while [ "$answer" != "git" -a "$answer" != "zip" ]
				do
					echo -n -e "\tUse git repository (for active development) or download zip file [ git/zip ]? ";
					read answer;
				done;

				success=$(install_lycheejs "$answer");
				if [ "$success" == "0" ]
				then
					echo -e "\tdone.";
				else
					echo -e "\tfailed (exit code: $success).";
					finish 1 "$success";
				fi;

			else
				echo -e "\tskipped.";
			fi;



			echo -e "done.";

		else
			echo -e "failed (no Ubuntu/Debian environment or aptitude is missing).";
			exit;
		fi;



		exit;
		;;
	build)

		if [ "$4" == "--debug" ]
		then
			DEBUG_MODE=1;
		fi;


		if [ "$2" == "all" -o "$2" == "linux" ]
		then
			GAME_PLATFORM=$2;
			V8_PLATFORM="x64.release";
		else
			echo -e "No valid <platform> given.";
			exit 1;
		fi


		if [ "$3" != "" -a -d "$3" -a -f "$3/init.js" ]
		then
			GAME_PATH=$(cd "$3"; pwd);
			cd $ADK_PATH;
		else
			echo -e "No valid game <path> given.";
			exit 1;
		fi;

		GAME_OUT=$ADK_PATH/out/$GAME_PLATFORM;



		#
		# BUILD V8
		#

		echo -e "\nBuilding V8... ($V8_PLATFORM)";

		success=$(build_v8 $V8_PLATFORM);

		if [ "$success" -eq "0" ]
		then
			echo -e "done.";
		else
			echo -e "failed (exit code: $success).";
			finish 1 "$success";
		fi;



		#
		# BUILD V8ADK
		#

		echo -e "\nBuilding V8ADK environment runtime... ($V8_PLATFORM)";

		success=$(build_v8gl $V8_PLATFORM "V8ADK");

		if [ "$success" -eq "0" ]
		then
			echo -e "done.";
		else
			echo -e "failed (exit code: $success).";
			finish 1 "$success";
		fi;



		#
		# BUILD V8GL
		#

		echo -e "\nBuilding V8GL game runtime... ($V8_PLATFORM)";

		success=$(build_v8gl $V8_PLATFORM);

		if [ "$success" -eq "0" ]
		then
			echo -e "done.";
		else
			echo -e "failed (exit code: $success).";
			finish 1 "$success";
		fi;



		#
		# BUILD GAME
		#

		echo -e "\nBuilding Game... ($GAME_PATH)";

		success=$(build_game $GAME_PATH $GAME_OUT);

		if [ "$success" -eq "0" ]
		then
			echo -e "done.";
		else
			echo -e "failed (exit code: $success).";
			finish 1 "$success";
		fi;



		exit;
		;;
	clean)



		while [ "$answer" != "yes" -a "$answer" != "no" ]
		do
			echo -n -e "WARNING: This will remove all previous builds in \"./out/\". Continue [ yes/no ]? ";
			read answer;
		done;

		if [ "$answer" == "yes" ]
		then

			echo -e "\nCleaning up...";

			success=$(clean);
			if [ "$success" == "0" ]
			then
				echo -e "done.";
			else
				echo -e "failed (exit code: $success).";
				finish 1 "$success";
			fi;

		fi;



		exit;
		;;
esac;



usage;

